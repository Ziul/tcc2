commit 018ef01ae3d3c1e21cfbdaf8bd1ad4b1917a259d
Author: Luiz Oliveira <ziuloliveira@gmail.com>
Date:   Sun Aug 30 13:57:49 2015 -0300

    Included PackageInfo class
    
    Signed-off-by: Luiz Oliveira <ziuloliveira@gmail.com>

diff --git a/apt-private/private-output.cc b/apt-private/private-output.cc
index b8e6dec..cde8cb7 100644
--- a/apt-private/private-output.cc
+++ b/apt-private/private-output.cc
@@ -188,7 +188,7 @@ static std::string GetArchitecture(pkgCacheFile &CacheFile, pkgCache::PkgIterato
       return P.CurrentVer().Arch();
 }
 									/*}}}*/
-static std::string GetShortDescription(pkgCacheFile &CacheFile, pkgRecords &records, pkgCache::PkgIterator P)/*{{{*/
+std::string GetShortDescription(pkgCacheFile &CacheFile, pkgRecords &records, pkgCache::PkgIterator P)/*{{{*/
 {
    pkgPolicy *policy = CacheFile.GetPolicy();
 
diff --git a/apt-private/private-output.h b/apt-private/private-output.h
index 4930fd9..0870143 100644
--- a/apt-private/private-output.h
+++ b/apt-private/private-output.h
@@ -25,6 +25,7 @@ APT_PUBLIC extern unsigned int ScreenWidth;
 
 APT_PUBLIC bool InitOutput(std::basic_streambuf<char> * const out = std::cout.rdbuf());
 
+std::string GetShortDescription(pkgCacheFile &CacheFile, pkgRecords &records, pkgCache::PkgIterator P);
 void ListSingleVersion(pkgCacheFile &CacheFile, pkgRecords &records,
                        pkgCache::VerIterator const &V, std::ostream &out,
                        std::string const &format);
diff --git a/apt-private/private-package-info.cc b/apt-private/private-package-info.cc
new file mode 100644
index 0000000..d08db4b
--- /dev/null
+++ b/apt-private/private-package-info.cc
@@ -0,0 +1,116 @@
+// Includes                      /*{{{*/
+#include <config.h>
+
+#include <apt-pkg/configuration.h>
+#include <apt-pkg/strutl.h>
+#include <apt-pkg/error.h>
+#include <apt-pkg/cachefile.h>
+#include <apt-pkg/pkgrecords.h>
+#include <apt-pkg/policy.h>
+#include <apt-pkg/depcache.h>
+#include <apt-pkg/pkgcache.h>
+#include <apt-pkg/cacheiterators.h>
+
+#include <apt-private/private-output.h>
+#include <apt-private/private-cachefile.h>
+#include <apt-private/private-package-info.h>
+
+#include <regex.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <iomanip>
+#include <iostream>
+#include <sstream>
+#include <langinfo.h>
+#include <unistd.h>
+#include <signal.h>
+#include <sys/ioctl.h>
+#include <sstream>
+
+#include <apti18n.h>
+                  /*}}}*/
+
+
+using namespace std;
+
+PackageInfo::PackageInfo(pkgCacheFile &CacheFile, pkgRecords &records,
+                       pkgCache::VerIterator const &V, std::string formated_output)
+{
+   _formated_output = formated_output;
+
+   if(V)
+   {
+      pkgCache::PkgIterator const P = V.ParentPkg();
+      _name = P.Name();
+      _version = DeNull(V.VerStr());
+      _description = GetShortDescription(CacheFile, records, P);
+      _status = GetPackageStatus(CacheFile, V);
+   }
+
+}
+
+// PackageInfo::GetPackageStatus - Populate the package status       /*{{{*/
+// ---------------------------------------------------------------------
+/* Returns the actual status of a package */
+PackageInfo::PackageStatus 
+PackageInfo::GetPackageStatus(pkgCacheFile &CacheFile,   
+                       pkgCache::VerIterator const &V)
+{
+   pkgCache::PkgIterator const P = V.ParentPkg();
+   pkgDepCache * const DepCache = CacheFile.GetDepCache();
+   pkgDepCache::StateCache const &state = (*DepCache)[P];
+
+   PackageStatus Status = UNINSTALLED;
+   if (P->CurrentVer != 0)
+   {
+      if (P.CurrentVer() == V)
+      {
+         if (state.Upgradable() && state.CandidateVer != NULL)
+            Status = INSTALLED_UPGRADABLE;
+         else if (V.Downloadable() == false)
+            Status = INSTALLED_LOCAL;
+         else if(V.Automatic() == true && state.Garbage == true)
+            Status = INSTALLED_AUTO_REMOVABLE;
+         else if ((state.Flags & pkgCache::Flag::Auto) == pkgCache::Flag::Auto)
+            Status = INSTALLED_AUTOMATIC;
+         else
+            Status = INSTALLED;
+      }
+      else if (state.CandidateVer == V && state.Upgradable())
+      Status = UPGRADABLE;
+   }
+   else if (V.ParentPkg()->CurrentState == pkgCache::State::ConfigFiles)
+      Status = RESIDUAL_CONFIG;
+
+    return Status;
+}
+                  /*}}}*/
+
+
+bool OrderByStatus (const PackageInfo &a, const PackageInfo &b)
+{
+   if(a.status() == b.status())
+      return a.name() < b.name();
+   else
+      return a.status() < b.status();
+}
+
+bool OrderByAlphabetic (const PackageInfo &a, const PackageInfo &b)
+{
+   return a.name() < b.name();
+}
+
+bool OrderByReverseAlphabetic (const PackageInfo &a, const PackageInfo &b)
+{
+        return a.name() > b.name();
+}
+
+
+bool OrderByVersion (const PackageInfo &a, const PackageInfo &b)
+{
+   if(a.version() == b.version())
+      return a.name() < b.name();
+   else
+      return a.version() > b.version();
+}
diff --git a/apt-private/private-package-info.h b/apt-private/private-package-info.h
new file mode 100644
index 0000000..1adc7b8
--- /dev/null
+++ b/apt-private/private-package-info.h
@@ -0,0 +1,48 @@
+#ifndef APT_PRIVATE_PACKAGE_INFO_H
+#define APT_PRIVATE_PACKAGE_INFO_H
+
+class PackageInfo
+{
+public:
+
+    typedef enum{
+        UNINSTALLED,
+        INSTALLED_UPGRADABLE,
+        INSTALLED_LOCAL,
+        INSTALLED_AUTO_REMOVABLE,
+        INSTALLED_AUTOMATIC,
+        INSTALLED,
+        UPGRADABLE,
+        RESIDUAL_CONFIG
+    } PackageStatus;
+
+    PackageInfo(pkgCacheFile &CacheFile, pkgRecords &records,
+                       pkgCache::VerIterator const &V, std::string formated_output="");
+
+    std::string format() const {return _format;}
+    std::string name() const {return _name;}
+    std::string version() const {return _version;}
+    PackageStatus status() const {return _status;}
+    std::string formated_output() const {return _formated_output;}
+
+    void set_formated_output(const std::string& formated_output){_formated_output = formated_output;}
+    void set_format(const std::string& format){_format = format;}
+
+private:
+    std::string  _name, 
+            _formated_output, 
+            _description, 
+            _version, 
+            _format = "${db::Status-Abbrev} ${Package} ${Version} ${Origin} ${Description}";
+    PackageStatus _status;        
+
+    PackageStatus GetPackageStatus(pkgCacheFile &CacheFile, pkgCache::VerIterator const &V);
+};
+
+//Sort kinds
+bool OrderByStatus (const PackageInfo &a, const PackageInfo &b);
+bool OrderByVersion (const PackageInfo &a, const PackageInfo &b);
+bool OrderByAlphabetic (const PackageInfo &a, const PackageInfo &b);
+bool OrderByReverseAlphabetic (const PackageInfo &a, const PackageInfo &b);
+
+#endif
