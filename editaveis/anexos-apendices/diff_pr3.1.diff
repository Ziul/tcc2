commit aae1adc583ff0d7722968ea6202ca915931007e5
Author: Luiz Oliveira <ziuloliveira@gmail.com>
Date:   Wed Oct 28 02:30:08 2015 -0200

    Improved search when results are empty
    
    - If Results are empty, a new search will be  done using Levenshtein
      to avoid typo spelling
    - If a regex is inserted to search, aonly a regex will be compilled
    
    Signed-off-by: Luiz Oliveira <ziuloliveira@gmail.com>

diff --git a/apt-private/private-package-info.cc b/apt-private/private-package-info.cc
index 2c8adac..96786e4 100644
--- a/apt-private/private-package-info.cc
+++ b/apt-private/private-package-info.cc
@@ -14,7 +14,7 @@
 using namespace std;
 
 PackageInfo::PackageInfo(pkgCacheFile &CacheFile, pkgRecords &records,
-		       pkgCache::VerIterator const &V, std::string formated_output)
+			pkgCache::VerIterator const &V, std::string formated_output)
 {
    _formated_output = formated_output;
 
@@ -100,3 +100,8 @@ bool OrderByVersion (const PackageInfo &a, const PackageInfo &b)
    else
       return false;
 }
+
+bool OrderByDistance (const PackageInfo &a, const PackageInfo &b)
+{
+   return a.distance < b.distance;
+}
\ No newline at end of file
diff --git a/apt-private/private-package-info.h b/apt-private/private-package-info.h
index 5fb7f60..69ea08a 100644
--- a/apt-private/private-package-info.h
+++ b/apt-private/private-package-info.h
@@ -5,51 +5,55 @@ class PackageInfo
 {
 public:
 
-    typedef enum{
-        UNINSTALLED,
-        INSTALLED_UPGRADABLE,
-        INSTALLED_LOCAL,
-        INSTALLED_AUTO_REMOVABLE,
-        INSTALLED_AUTOMATIC,
-        INSTALLED,
-        UPGRADABLE,
-        RESIDUAL_CONFIG
-    } PackageStatus;
-
-    typedef enum{
-        ALPHABETIC,
-        REVERSEALPHABETIC,
-        STATUS,
-        VERSION
-    } SortBy;
-
-    PackageInfo(pkgCacheFile &CacheFile, pkgRecords &records,
-                       pkgCache::VerIterator const &V, std::string formated_output="");
-
-    std::string format() const {return _format;}
-    std::string name() const {return _name;}
-    std::string version() const {return _version;}
-    PackageStatus status() const {return _status;}
-    std::string formated_output() const {return _formated_output;}
-
-    void set_formated_output(const std::string& formated_output){_formated_output = formated_output;}
-    void set_format(const std::string& format){_format = format;}
-
-    static SortBy getOrderByOption ();
+   typedef enum{
+      UNINSTALLED,
+      INSTALLED_UPGRADABLE,
+      INSTALLED_LOCAL,
+      INSTALLED_AUTO_REMOVABLE,
+      INSTALLED_AUTOMATIC,
+      INSTALLED,
+      UPGRADABLE,
+      RESIDUAL_CONFIG
+   } PackageStatus;
+
+   typedef enum{
+      ALPHABETIC,
+      REVERSEALPHABETIC,
+      STATUS,
+       VERSION
+   } SortBy;
+   int distance;
+
+   PackageInfo(pkgCacheFile &CacheFile, pkgRecords &records,
+		pkgCache::VerIterator const &V, std::string formated_output="");
+
+   PackageInfo(){}
+   ~PackageInfo(){}
+   std::string format() const {return _format;}
+   std::string name() const {return _name;}
+   std::string version() const {return _version;}
+   PackageStatus status() const {return _status;}
+   std::string formated_output() const {return _formated_output;}
+
+   void set_formated_output(const std::string& formated_output){_formated_output = formated_output;}
+   void set_format(const std::string& format){_format = format;}
+
+   static SortBy getOrderByOption ();
 private:
-    std::string  _name,
-            _formated_output,
-            _description,
-            _version,
-            _format = "${db::Status-Abbrev} ${Package} ${Version} ${Origin} ${Description}";
-    PackageStatus _status;
-
-    PackageStatus GetPackageStatus(pkgCacheFile &CacheFile, pkgCache::VerIterator const &V);
+   std::string  _name,
+	   _formated_output,
+	   _description,
+	   _version,
+	   _format = "${db::Status-Abbrev} ${Package} ${Version} ${Origin} ${Description}";
+   PackageStatus _status;
+
+   PackageStatus GetPackageStatus(pkgCacheFile &CacheFile, pkgCache::VerIterator const &V);
 };
 
 //Sort kinds
 bool OrderByStatus (const PackageInfo &a, const PackageInfo &b);
 bool OrderByVersion (const PackageInfo &a, const PackageInfo &b);
 bool OrderByAlphabetic (const PackageInfo &a, const PackageInfo &b);
+bool OrderByDistance (const PackageInfo &a, const PackageInfo &b);
 
 #endif
diff --git a/apt-private/private-search.cc b/apt-private/private-search.cc
index 5915667..a2a4418 100644
--- a/apt-private/private-search.cc
+++ b/apt-private/private-search.cc
@@ -16,6 +16,7 @@
 #include <vector>
 #include <algorithm>
 
+std::vector<PackageInfo> SimilarSearch(LocalitySortedVersionSet bag, std::vector<std::string> args);
 #define RABINKARPHASH(a, b, h, d) ((((h) - (a)*d) << 1) + (b))
 									/*}}}*/
 
@@ -40,7 +41,7 @@ int RabinKarp(std::string StringInput, std::string Pattern) {
    /* Searching */
    for (int i =0; i <= pattern_length-string_length; ++i) {
       if (hash_input == hash_pattern && memcmp(StringInput.c_str(), Pattern.c_str() + i, string_length) == 0)
-	return i;
+	 return i;
       hash_pattern = RABINKARPHASH(Pattern.c_str()[i], Pattern.c_str()[i + string_length], hash_pattern, mask);
    }
 
@@ -48,6 +49,52 @@ int RabinKarp(std::string StringInput, std::string Pattern) {
    return -1;
 }
 
+int levenshtein_distance(const std::string &s1, const std::string &s2)
+{
+   int s1len = s1.size();
+   int s2len = s2.size();
+
+   if (s2len > s1len)
+      return -1;
+   auto column_start = (decltype(s1len))1;
+
+   auto column = new decltype(s1len)[s1len + 1];
+   std::iota(column + column_start, column + s1len + 1, column_start);
+
+   for (auto x = column_start; x <= s2len; x++) {
+      column[0] = x;
+      auto last_diagonal = x - column_start;
+      for (auto y = column_start; y <= s1len; y++) {
+         auto old_diagonal = column[y];
+         auto possibilities = {
+            column[y] + 1,
+            column[y - 1] + 1,
+            last_diagonal + (s1[y - 1] == s2[x - 1]? 0 : 1)
+         };
+         column[y] = std::min(possibilities);
+         last_diagonal = old_diagonal;
+      }
+   }
+   auto result = column[s1len];
+   delete[] column;
+   return result;
+}
+
+bool identify_regex(std::vector<std::string> input)
+{
+   /*
+      not all characters can be included, as have
+      packages with the chars .-:
+   */
+   std::string reserver_regex = "^$*+?()[]{}\\|";
+
+   for(auto k:input)
+      if( reserver_regex.find(k) == std::string::npos )
+	 return true;
+   return false;
+
+}
+
 bool FullTextSearch(CommandLine &CmdL)					/*{{{*/
 {
    pkgCacheFile CacheFile;
@@ -66,7 +113,10 @@ bool FullTextSearch(CommandLine &CmdL)					/*{{{*/
 
    // Compile the regex pattern
    std::vector<regex_t> Patterns;
-   if (_config->FindB("APT::Cache::UsingRegex",false))
+   std::vector<std::string> args;
+   for (unsigned int I = 0; I != NumPatterns; ++I)
+      args.emplace_back( CmdL.FileList[I + 1]);
+   if ((_config->FindB("APT::Cache::UsingRegex",false)) || identify_regex(args))
       for (unsigned int I = 0; I != NumPatterns; ++I)
       {
 	 regex_t pattern;
@@ -104,7 +154,7 @@ bool FullTextSearch(CommandLine &CmdL)					/*{{{*/
    for ( ;V != bag.end(); ++V)
    {
       if (Done%500 == 0)
-         progress.Progress(Done);
+	 progress.Progress(Done);
       ++Done;
 
       // we want to list each package only once
@@ -118,7 +168,7 @@ bool FullTextSearch(CommandLine &CmdL)					/*{{{*/
       std::string const LongDesc = parser.LongDesc();
 
       bool all_found = true;
-      if (_config->FindB("APT::Cache::UsingRegex",false))
+      if ((_config->FindB("APT::Cache::UsingRegex",false)) || identify_regex(args))
       {
 	 for (std::vector<regex_t>::const_iterator pattern = Patterns.begin();
 	       pattern != Patterns.end(); ++pattern)
@@ -136,7 +186,7 @@ bool FullTextSearch(CommandLine &CmdL)					/*{{{*/
       {
 	 for (unsigned int I = 0; I != NumPatterns; ++I)
 	 {
-	    if ((RabinKarp(CmdL.FileList[I + 1], P.Name()) >= 0) ) 
+	    if ((RabinKarp(CmdL.FileList[I + 1], P.Name()) >= 0) )
 	    {
 	       continue;
 	    }
@@ -154,22 +204,31 @@ bool FullTextSearch(CommandLine &CmdL)					/*{{{*/
 	 outputVector.emplace_back(CacheFile, records, V, outs.str());
       }
    }
-   switch(PackageInfo::getOrderByOption())
+   if(outputVector.size() == 0)
    {
-      case PackageInfo::REVERSEALPHABETIC:
-	 std::sort(outputVector.rbegin(), outputVector.rend(), OrderByAlphabetic);
-	 break;
-      case PackageInfo::STATUS:
-	 std::sort(outputVector.begin(), outputVector.end(), OrderByStatus);
-	 break;
-      case PackageInfo::VERSION:
-	 std::sort(outputVector.begin(), outputVector.end(), OrderByVersion);
-	 break;
-      default:
-	 std::sort(outputVector.begin(), outputVector.end(), OrderByAlphabetic);
-	 break;
+      progress.Done();
+      outputVector = SimilarSearch(bag,args);
+      if(outputVector.size() > 10)
+	 outputVector.resize(10);
+      std::cout << "None package fould. Maybe you are looking for one of those:" << std::endl;
    }
-   if (_config->FindB("APT::Cache::UsingRegex",false))
+   else
+      switch(PackageInfo::getOrderByOption())
+      {
+	 case PackageInfo::REVERSEALPHABETIC:
+	    std::sort(outputVector.rbegin(), outputVector.rend(), OrderByAlphabetic);
+	    break;
+	 case PackageInfo::STATUS:
+	    std::sort(outputVector.begin(), outputVector.end(), OrderByStatus);
+	    break;
+	 case PackageInfo::VERSION:
+	    std::sort(outputVector.begin(), outputVector.end(), OrderByVersion);
+	    break;
+	 default:
+	    std::sort(outputVector.begin(), outputVector.end(), OrderByAlphabetic);
+	    break;
+      }
+   if ((_config->FindB("APT::Cache::UsingRegex",false)) || identify_regex(args))
       APT_FREE_PATTERNS();
    progress.Done();
 
@@ -380,3 +439,48 @@ bool DoSearch(CommandLine &CmdL)					/*{{{*/
    return FullTextSearch(CmdL);
 }
 
+std::vector<PackageInfo> SimilarSearch(LocalitySortedVersionSet bag, std::vector<std::string> args)
+{
+   pkgCacheFile CacheFile;
+   std::vector<PackageInfo> outputVector;
+   pkgCache *Cache = CacheFile.GetPkgCache();
+   pkgDepCache::Policy *Plcy = CacheFile.GetPolicy();
+   if (unlikely(Cache == NULL || Plcy == NULL))
+      return outputVector;
+   pkgRecords records(CacheFile);
+   std::vector<bool> PkgsDone(Cache->Head().PackageCount, false);
+   std::string format = "${color:highlight}${Package}${color:neutral}/${Origin} ${Version} ${Architecture}${ }${apt:Status}\n";
+   if (_config->FindB("APT::Cache::ShowFull",false) == false)
+      format += "  ${Description}\n";
+   else
+      format += "  ${LongDescription}\n";
+
+   for(auto V:bag)
+   {
+
+      // we want to list each package only once
+      pkgCache::PkgIterator const P = V.ParentPkg();
+      if (PkgsDone[P->ID] == true)
+	 continue;
+
+      std::string PkgName = P.Name();
+      pkgCache::DescIterator Desc = V.TranslatedDescription();
+      pkgRecords::Parser &parser = records.Lookup(Desc.FileList());
+      std::string const LongDesc = parser.LongDesc();
+
+      for (auto arg:args)
+      {
+         int distance = levenshtein_distance(PkgName, arg);
+	 if ((distance >=0) && (distance <= (int)PkgName.length()/2 ))
+	 {
+	    PkgsDone[P->ID] = true;
+	    std::stringstream outs;
+	    ListSingleVersion(CacheFile, records, V, outs, format);
+	    outputVector.emplace_back(CacheFile, records, V, outs.str());
+	    outputVector.back().distance = distance;
+	 }
+      }
+   }
+   std::sort(outputVector.begin(), outputVector.end(), OrderByDistance);
+   return outputVector;
+}
diff --git a/apt-private/private-search.h b/apt-private/private-search.h
index 9c277e5..19a7586 100644
--- a/apt-private/private-search.h
+++ b/apt-private/private-search.h
@@ -10,5 +10,7 @@ APT_PUBLIC bool DoSearch(CommandLine &CmdL);
 APT_PUBLIC void LocalitySort(pkgCache::VerFile ** const begin, unsigned long long const Count,size_t const Size);
 
 APT_PUBLIC bool FullTextSearch(CommandLine &CmdL);
+bool identify_regex(std::vector<std::string> input);
 int RabinKarp(std::string StringInput, std::string Pattern);
+int levenshtein_distance(const std::string &s1, const std::string &s2);
 #endif
diff --git a/test/integration/test-apt-cli-search b/test/integration/test-apt-cli-search
index 3343c1f..5f7cf6a 100755
--- a/test/integration/test-apt-cli-search
+++ b/test/integration/test-apt-cli-search
@@ -43,7 +43,13 @@ foo/unstable 1.0 all
 testsuccessequal "foo/unstable 1.0 all
   $DESCR
 " apt search -qq xxyyzz
-testempty apt search -qq --names-only xxyyzz
+
+#empty results
+testsuccessequal "None package fould. Maybe you are looking for one of those:" apt search -qq --names-only xxyyzz
+testsuccessequal "None package fould. Maybe you are looking for one of those:
+baz/now 0.1 all [installed,local]
+  $DESCR4
+" apt search -qq --names-only bez
 
 # search name
 testsuccessequal "foo/unstable 1.0 all
